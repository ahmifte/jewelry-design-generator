name: Python Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .
    
    - name: Test with pytest
      env:
        MESHY_API_KEY: ${{ secrets.MESHY_API_KEY }}
      run: |
        python -m pytest tests/ --cov=python_jewelry_design_gen --cov-report=term-missing --cov-report=json
    
    - name: Create coverage comment
      id: coverage-comment
      run: |
        TOTAL=$(python -c "import json; data=json.load(open('coverage.json')); print(f'{data['totals']['percent_covered']:.2f}%')")
        MISSING=$(python -c "import json; data=json.load(open('coverage.json')); print(len(data['missing_lines']))")
        
        echo "COVERAGE_TOTAL=$TOTAL" >> $GITHUB_ENV
        echo "MISSING_LINES=$MISSING" >> $GITHUB_ENV
        
        # Create a detailed report with files
        echo "### Coverage Report for Python ${{ matrix.python-version }}" > coverage_report.md
        echo "- **Total Coverage**: $TOTAL" >> coverage_report.md
        echo "- **Missing Lines**: $MISSING" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "#### Files with missing coverage:" >> coverage_report.md
        python -c "
        import json
        data = json.load(open('coverage.json'))
        files = [{'file': file, 'coverage': data['files'][file]['summary']['percent_covered'], 'missing': sorted(data['files'][file]['missing_lines'])} for file in data['files'] if data['files'][file]['missing_lines']]
        files.sort(key=lambda x: x['coverage'])
        for item in files[:10]:  # Limit to top 10 files with lowest coverage
            print(f'- **{item[\"file\"]}**: {item[\"coverage\"]:.2f}% - Missing lines: {item[\"missing\"]}', file=open('coverage_report.md', 'a'))
        " || true
        
        cat coverage_report.md >> $GITHUB_STEP_SUMMARY
    
    - name: Post coverage comment on PR
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        header: coverage-${{ matrix.python-version }}
        path: coverage_report.md 